/* 
 * Nexo Dash - Sistema de M√≥dulos
 * Gerencia a progress√£o dos m√≥dulos educacionais
 */

const ModuleSystem = {
    currentStep: 0,
    
    /**
     * Defini√ß√£o dos m√≥dulos do curso
     */
    modules: [
        {
            title: 'M√≥dulo 0: Calibra√ß√£o da Esta√ß√£o',
            steps: [
                {
                    title: 'Bem-vindo ao Nexo Dash',
                    content: `
                        <div style="text-align: center; margin-bottom: 2rem;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">üß¨</div>
                            <p><strong>Bem-vindo ao Laborat√≥rio Virtual Nexo Dash!</strong></p>
                        </div>
                        <p>Eu sou a <strong>Dra. Ana Turing</strong>, sua mentora nesta jornada de aprendizado.</p>
                        <p>Voc√™ foi recrutado para uma miss√£o importante: analisar fatores de risco de doen√ßas card√≠acas usando um dataset real do Kaggle.</p>
                        <p><strong>Sua miss√£o:</strong> Construir um dashboard profissional usando Python, Dash e as melhores pr√°ticas da ind√∫stria.</p>
                        <p>Vamos come√ßar calibrando sua esta√ß√£o de trabalho!</p>
                    `,
                    actions: [{ 
                        label: 'Aceitar Miss√£o', 
                        callback: () => {
                            ThreeJSSystem.drTuringSpeak3D('Excelente! Voc√™ aceitou a miss√£o. Agora vamos configurar seu ambiente de desenvolvimento profissional. Primeiro, precisamos instalar o VS Code, o editor de c√≥digo mais usado na ind√∫stria.', 6000);
                            ModuleSystem.nextStep();
                        }
                    }]
                },
                {
                    title: 'Passo 1: Instala√ß√£o do VS Code',
                    content: `
                        <div style="background: rgba(0,100,100,0.2); padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                            <h4>üîß Configura√ß√£o do Ambiente</h4>
                        </div>
                        <p><strong>Visual Studio Code</strong> √© nosso editor principal. Se ainda n√£o tem instalado:</p>
                        <ol>
                            <li>Acesse: <a href="https://code.visualstudio.com/" target="_blank" style="color: #00ccff;">https://code.visualstudio.com/</a></li>
                            <li>Baixe a vers√£o para seu sistema operacional</li>
                            <li>Execute a instala√ß√£o com as configura√ß√µes padr√£o</li>
                            <li>Abra o VS Code ap√≥s a instala√ß√£o</li>
                        </ol>
                        <p><strong>Extens√µes recomendadas:</strong></p>
                        <ul>
                            <li><strong>Python (Microsoft)</strong>: Suporte completo para Python</li>
                            <li><strong>Ruff (Astral Software)</strong>: Linter e formatter super r√°pido</li>
                            <li><strong>Error Lens</strong>: Mostra erros diretamente no c√≥digo</li>
                            <li><strong>Data Wrangler (Microsoft)</strong>: Visualiza√ß√£o de dados CSV/Excel</li>
                        </ul>
                        <p><em>üí° Essas extens√µes transformar√£o seu VS Code numa IDE Python profissional!</em></p>
                    `,
                    actions: [
                        { 
                            label: 'VS Code Instalado', 
                            callback: () => {
                                ThreeJSSystem.drTuringSpeak3D('Perfeito! Com o VS Code instalado, agora vamos configurar o uv, o gerenciador de pacotes Python mais r√°pido e moderno da atualidade.', 5000);
                                ModuleSystem.nextStep();
                            }
                        },
                        { 
                            label: 'J√° Tenho VS Code', 
                            callback: () => {
                                ThreeJSSystem.drTuringSpeak3D('√ìtimo! Voc√™ j√° tem o VS Code. Agora vamos para o pr√≥ximo passo: instalar o uv para gerenciar nossos pacotes Python.', 5000);
                                ModuleSystem.nextStep();
                            }
                        }
                    ]
                },
                {
                    title: 'Passo 2: Instala√ß√£o do uv',
                    content: `
                        <div style="background: rgba(100,0,100,0.2); padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                            <h4>‚ö° Gerenciador de Pacotes Moderno</h4>
                        </div>
                        <p><strong>uv</strong> √© o gerenciador de pacotes Python mais r√°pido da atualidade (Astral).</p>
                        
                        <p><strong>Windows (PowerShell):</strong></p>
                        <div class="code-block">
                            <code>powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"</code>
                        </div>
                        
                        <p><strong>macOS/Linux:</strong></p>
                        <div class="code-block">
                            <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code>
                        </div>
                        
                        <p><strong>Verificar instala√ß√£o:</strong></p>
                        <div class="code-block">
                            <code>uv --version</code>
                        </div>
                        
                        <p><em>‚ö†Ô∏è Pode ser necess√°rio reiniciar o terminal ap√≥s a instala√ß√£o.</em></p>
                    `,
                    actions: [
                        { 
                            label: 'uv Instalado', 
                            callback: () => {
                                ThreeJSSystem.drTuringSpeak3D('Excelente! O uv est√° instalado e pronto. Agora vamos criar a estrutura do nosso projeto de an√°lise card√≠aca usando as melhores pr√°ticas da ind√∫stria.', 5000);
                                ModuleSystem.nextStep();
                            }
                        }
                    ]
                },
                {
                    title: 'Passo 3: Cria√ß√£o do Projeto',
                    content: `
                        <div style="background: rgba(0,100,0,0.2); padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                            <h4>üèóÔ∏è Estrutura do Projeto</h4>
                        </div>
                        <p>Agora vamos criar a estrutura do nosso projeto de an√°lise card√≠aca:</p>
                        
                        <p><strong>1. Criar pasta do projeto:</strong></p>
                        <div class="code-block">
                            <code>mkdir dashboard-cardiaco<br>cd dashboard-cardiaco</code>
                        </div>
                        
                        <p><strong>2. Inicializar projeto com uv:</strong></p>
                        <div class="code-block">
                            <code>uv init</code>
                        </div>
                        
                        <p><strong>3. Abrir no VS Code:</strong></p>
                        <div class="code-block">
                            <code>code .</code>
                        </div>
                        
                        <p>‚ú® O comando <code>uv init</code> criar√° automaticamente o arquivo <code>pyproject.toml</code> que √© o centro de controle do projeto!</p>
                    `,
                    actions: [
                        { 
                            label: 'Projeto Criado', 
                            callback: () => {
                                ThreeJSSystem.drTuringSpeak3D('Fant√°stico! A estrutura do projeto est√° criada. Agora vamos instalar as bibliotecas essenciais para construir nosso dashboard de an√°lise card√≠aca.', 5000);
                                ModuleSystem.nextStep();
                            }
                        }
                    ]
                },
                {
                    title: 'Passo 4: Instala√ß√£o de Depend√™ncias',
                    content: `
                        <div style="background: rgba(100,100,0,0.2); padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                            <h4>üì¶ Bibliotecas Essenciais</h4>
                        </div>
                        <p>Vamos instalar as bibliotecas que usaremos no dashboard:</p>
                        
                        <div class="code-block">
                            <code>uv add dash dash-mantine-components dash-chart-editor pandas plotly</code>
                        </div>
                        
                        <p><strong>O que cada biblioteca faz:</strong></p>
                        <ul>
                            <li><strong>dash</strong>: Framework principal para dashboards web</li>
                            <li><strong>dash-mantine-components</strong>: Componentes UI modernos</li>
                            <li><strong>dash-chart-editor</strong>: Editor visual de gr√°ficos</li>
                            <li><strong>pandas</strong>: Manipula√ß√£o e an√°lise de dados</li>
                            <li><strong>plotly</strong>: Cria√ß√£o de gr√°ficos interativos</li>
                        </ul>
                        
                        <p>üöÄ O uv resolver√° automaticamente todas as depend√™ncias e criar√° um ambiente virtual!</p>
                    `,
                    actions: [
                        { 
                            label: 'Depend√™ncias Instaladas', 
                            callback: () => {
                                ThreeJSSystem.drTuringSpeak3D('Perfeito! Todas as bibliotecas est√£o instaladas. Sua esta√ß√£o de trabalho est√° completamente calibrada e pronta para a miss√£o! Agora vamos carregar o blueprint do projeto.', 6000);
                                ModuleSystem.nextStep();
                            }
                        }
                    ]
                },
                {
                    title: 'Calibra√ß√£o Completa!',
                    content: `
                        <div style="text-align: center; margin-bottom: 2rem;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">‚úÖ</div>
                            <p><strong>Esta√ß√£o de Trabalho Calibrada!</strong></p>
                        </div>
                        <p>Excelente trabalho! Sua esta√ß√£o est√° configurada com:</p>
                        <ul>
                            <li>‚úÖ VS Code configurado</li>
                            <li>‚úÖ uv instalado e funcionando</li>
                            <li>‚úÖ Projeto inicializado</li>
                            <li>‚úÖ Depend√™ncias instaladas</li>
                        </ul>
                        
                        <p><strong>Pr√≥ximo passo:</strong> Vamos carregar o blueprint do projeto e os dados que analisaremos!</p>
                        
                        <div style="background: rgba(0,255,136,0.1); padding: 1rem; border-radius: 5px; margin-top: 1rem;">
                            <p><em>üí° Dica: Mantenha o VS Code aberto com seu projeto. Usaremos ele nos pr√≥ximos m√≥dulos!</em></p>
                        </div>
                    `,
                    actions: [
                        { 
                            label: 'Ir para M√≥dulo 1', 
                            callback: () => {
                                ThreeJSSystem.drTuringSpeak3D('Excelente trabalho! Sua esta√ß√£o est√° calibrada. Agora vamos carregar o blueprint 3D do projeto e os dados que analisaremos. Prepare-se para ver a arquitetura ganhar vida!', 7000);
                                ModuleSystem.nextModule();
                            }
                        }
                    ]
                }
            ]
        },
        {
            title: 'M√≥dulo 1: Blueprint do Projeto',
            steps: [
                {
                    title: 'Carregando Blueprint do Projeto',
                    content: `
                        <div style="text-align: center; margin-bottom: 2rem;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">üóÇÔ∏è</div>
                            <p><strong>Arquitetura do Projeto</strong></p>
                        </div>
                        <p>Agora vou mostrar a estrutura profissional que seu projeto deve ter.</p>
                        <p>Observe a visualiza√ß√£o 3D que aparecer√° ao lado - cada pasta e arquivo tem sua fun√ß√£o espec√≠fica.</p>
                        <p><strong>Clique nos elementos 3D</strong> para ver suas descri√ß√µes!</p>
                    `,
                    actions: [
                        { 
                            label: 'Carregar Blueprint', 
                            callback: () => {
                                ThreeJSSystem.drTuringSpeak3D('Iniciando carregamento do blueprint 3D! Observe como a arquitetura do projeto se materializa no laborat√≥rio virtual. Cada componente tem uma fun√ß√£o espec√≠fica.', 6000);
                                ModuleSystem.load3DBlueprint();
                            }
                        }
                    ]
                }
            ]
        }
    ],

    /**
     * Avan√ßa para o pr√≥ximo m√≥dulo
     */
    nextModule() {
        AppState.currentModule++;
        this.currentStep = 0;
        if (AppState.currentModule < this.modules.length) {
            this.showCurrentStep();
        } else {
            this.showUpcomingModules();
        }
        AppState.log(`Advanced to module ${AppState.currentModule}`);
    },

    /**
     * Avan√ßa para o pr√≥ximo passo
     */
    nextStep() {
        this.currentStep++;
        const currentModule = this.modules[AppState.currentModule];
        if (this.currentStep < currentModule.steps.length) {
            this.showCurrentStep();
        } else {
            this.nextModule();
        }
        AppState.log(`Advanced to step ${this.currentStep}`);
    },

    /**
     * Mostra o passo atual
     */
    showCurrentStep() {
        const currentModule = this.modules[AppState.currentModule];
        const currentStep = currentModule.steps[this.currentStep];
        
        if (currentStep) {
            UISystem.showPanel(currentStep.title, currentStep.content, currentStep.actions);
            AppState.log(`Showing step: ${currentStep.title}`);
        }
    },

    /**
     * Inicia o primeiro m√≥dulo
     */
    startFirstModule() {
        AppState.currentModule = 0;
        this.currentStep = 0;
        this.showCurrentStep();
        AppState.log('Started first module');
    },

    /**
     * Carrega o blueprint 3D
     */
    load3DBlueprint() {
        AppState.log('Loading 3D blueprint...');
        
        // Delegar para sistema de blueprint se existir
        if (typeof BlueprintSystem !== 'undefined') {
            BlueprintSystem.create3DProjectStructure();
        } else {
            // Fallback b√°sico
            UISystem.showNotification('Blueprint 3D carregado!', 'success');
        }
        
        this.nextStep();
    },

    /**
     * Mostra m√≥dulos futuros
     */
    showUpcomingModules() {
        UISystem.showPanel(
            'Pr√≥ximos M√≥dulos',
            `
                <div style="text-align: center; margin-bottom: 2rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">üöÄ</div>
                    <p><strong>Jornada de Desenvolvimento</strong></p>
                </div>
                <p>Aqui est√£o os pr√≥ximos m√≥dulos que implementaremos:</p>
                <ul>
                    <li><strong>M√≥dulo 2:</strong> N√∫cleo do Servidor (<code>app = Dash(__name__)</code>)</li>
                    <li><strong>M√≥dulo 3:</strong> Estrutura do Layout (dash_html_components)</li>
                    <li><strong>M√≥dulo 4:</strong> Primeira Visualiza√ß√£o (dash_core_components + Plotly)</li>
                    <li><strong>M√≥dulo 5:</strong> Interatividade (callbacks)</li>
                    <li><strong>M√≥dulo 6:</strong> Melhorias com Mantine (dash-mantine-components)</li>
                    <li><strong>M√≥dulo 7:</strong> Refinamento (dash-chart-editor)</li>
                    <li><strong>Projeto Final:</strong> Dashboard Completo</li>
                </ul>
                <div style="background: rgba(0,255,136,0.1); padding: 1rem; border-radius: 5px; margin-top: 1rem;">
                    <p><em>üéØ Cada m√≥dulo adiciona uma nova funcionalidade ao dashboard e uma nova pe√ßa √† arquitetura 3D!</em></p>
                </div>
            `,
            [
                { 
                    label: 'Explorar Ambiente', 
                    callback: () => UISystem.hidePanel() 
                },
                { 
                    label: 'Come√ßar M√≥dulo 2', 
                    callback: () => this.showComingSoon() 
                }
            ]
        );
    },

    /**
     * Mostra mensagem de "em breve"
     */
    showComingSoon() {
        UISystem.showPanel(
            'Em Desenvolvimento',
            `
                <div style="text-align: center;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">‚ö°</div>
                    <p><strong>M√≥dulos 2+ em Desenvolvimento</strong></p>
                    <p>Os pr√≥ximos m√≥dulos est√£o sendo preparados e estar√£o dispon√≠veis em breve!</p>
                    <p>Por enquanto, explore o ambiente 3D e familiarize-se com a estrutura do projeto.</p>
                </div>
            `,
            [
                { 
                    label: 'Fechar', 
                    callback: () => UISystem.hidePanel() 
                }
            ]
        );
    },

    /**
     * Obt√©m progresso atual
     */
    getProgress() {
        const totalSteps = this.modules.reduce((sum, module) => sum + module.steps.length, 0);
        const completedSteps = this.modules.slice(0, AppState.currentModule).reduce((sum, module) => sum + module.steps.length, 0) + this.currentStep;
        
        return {
            current: completedSteps,
            total: totalSteps,
            percentage: Math.round((completedSteps / totalSteps) * 100)
        };
    }
};

// Disponibilizar globalmente
window.ModuleSystem = ModuleSystem;
